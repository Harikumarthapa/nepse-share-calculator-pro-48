
import React, { useRef } from 'react';
import { FileImage, Download } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { CalculationInputs, CalculationResults } from './types';
import InputSummary from './results/InputSummary';
import FeeBreakdown from './results/FeeBreakdown';
import TaxCalculation from './results/TaxCalculation';
import FinalResult from './results/FinalResult';
import html2canvas from 'html2canvas';
import html2pdf from 'html2pdf.js';
import { saveAs } from 'file-saver';

interface ResultsDisplayProps {
  results: CalculationResults;
  inputs: CalculationInputs;
}

const ResultsDisplay: React.FC<ResultsDisplayProps> = ({ results, inputs }) => {
  const resultsRef = useRef<HTMLDivElement>(null);

  if (!results) return null;

  const generateWatermark = () => {
    const today = new Date();
    const formattedDate = today.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    });
    
    return `Generated by sharecalculator.app on ${formattedDate}`;
  };

  const handleDownloadPDF = () => {
    if (!resultsRef.current) return;

    const element = resultsRef.current;
    const watermark = generateWatermark();
    
    const opt = {
      margin: [10, 10],
      filename: 'nepse-calculation-result.pdf',
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },
      footer: {
        height: '10mm',
        contents: {
          default: `<div style="text-align: center; color: #888; font-size: 10px;">${watermark}</div>`
        }
      }
    };
    
    html2pdf().set(opt).from(element).save();
  };

  const handleDownloadPNG = async () => {
    if (!resultsRef.current) return;

    const element = resultsRef.current;
    
    try {
      // Create canvas from the DOM element
      const canvas = await html2canvas(element, {
        scale: 2,
        logging: false,
        useCORS: true,
        allowTaint: true,
      });
      
      // Add watermark to canvas
      const ctx = canvas.getContext('2d');
      if (ctx) {
        ctx.font = '10px Arial';
        ctx.fillStyle = '#888888';
        ctx.textAlign = 'center';
        ctx.fillText(generateWatermark(), canvas.width / 2, canvas.height - 10);
      }
      
      // Convert to Blob and download
      canvas.toBlob((blob) => {
        if (blob) {
          saveAs(blob, 'nepse-calculation-result.png');
        }
      }, 'image/png');
    } catch (error) {
      console.error('Error generating PNG:', error);
    }
  };

  return (
    <div className="mt-8 border-t pt-6">
      <h3 className="text-lg font-medium mb-4">Calculation Results</h3>
      
      <div ref={resultsRef} className="bg-white p-4 rounded-lg">
        <InputSummary inputs={inputs} />
        <FeeBreakdown results={results} />
        <TaxCalculation results={results} inputs={inputs} />
        <FinalResult results={results} inputs={inputs} />
      </div>
      
      <div className="mt-4 flex flex-wrap gap-2">
        <Button 
          onClick={handleDownloadPDF}
          size="sm"
          className="flex items-center gap-1"
        >
          <Download size={16} />
          Download PDF
        </Button>
        
        <Button 
          onClick={handleDownloadPNG}
          size="sm"
          variant="outline"
          className="flex items-center gap-1"
        >
          <FileImage size={16} />
          Download PNG
        </Button>
      </div>
    </div>
  );
};

export default ResultsDisplay;
