
import React, { useRef } from 'react';
import { FileImage, Download } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { CalculationInputs, CalculationResults } from './types';
import InputSummary from './results/InputSummary';
import FeeBreakdown from './results/FeeBreakdown';
import TaxCalculation from './results/TaxCalculation';
import FinalResult from './results/FinalResult';
import html2canvas from 'html2canvas';
import html2pdf from 'html2pdf.js';
import { useLanguage } from '@/contexts/LanguageContext';
import { useIsMobile } from '@/hooks/use-mobile';

interface ResultsDisplayProps {
  results: CalculationResults | null;
  inputs: CalculationInputs;
}

const ResultsDisplay: React.FC<ResultsDisplayProps> = ({ results, inputs }) => {
  const resultsRef = useRef<HTMLDivElement>(null);
  const { t, language } = useLanguage();
  const isMobile = useIsMobile();
  
  // Check if we have valid results with actual values (not just empty placeholders)
  const hasValidResults = results && 
    (inputs.quantity && 
    ((inputs.transactionType === 'buy' && inputs.buyPrice) || 
     (inputs.transactionType === 'sell' && inputs.buyPrice && inputs.sellPrice)));

  const generateWatermark = () => {
    const today = new Date();
    const formattedDate = today.toLocaleDateString(language === 'ne' ? 'ne-NP' : 'en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    });
    
    return `Generated by sharecalculator.app on ${formattedDate}`;
  };

  const handleDownloadPDF = () => {
    if (!resultsRef.current) return;

    const element = resultsRef.current;
    const watermark = generateWatermark();
    
    const opt = {
      margin: [10, 10],
      filename: 'nepse-calculation-result.pdf',
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },
      footer: {
        height: '10mm',
        contents: {
          default: `<div style="text-align: center; color: #888; font-size: 10px;">${watermark}</div>`
        }
      }
    };
    
    html2pdf().set(opt).from(element).save();
  };

  const handleDownloadPNG = async () => {
    if (!resultsRef.current) return;

    const element = resultsRef.current;
    
    try {
      // Create canvas from the DOM element
      const canvas = await html2canvas(element, {
        scale: 2,
        logging: false,
        useCORS: true,
        allowTaint: true,
      });
      
      // Add watermark to canvas
      const ctx = canvas.getContext('2d');
      if (ctx) {
        ctx.font = '10px Arial';
        ctx.fillStyle = '#888888';
        ctx.textAlign = 'center';
        ctx.fillText(generateWatermark(), canvas.width / 2, canvas.height - 10);
      }
      
      // Convert to Blob and download
      canvas.toBlob((blob) => {
        if (blob) {
          // Using native download method instead of file-saver
          const url = URL.createObjectURL(blob);
          const link = document.createElement('a');
          link.href = url;
          link.download = 'nepse-calculation-result.png';
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          URL.revokeObjectURL(url);
        }
      }, 'image/png');
    } catch (error) {
      console.error('Error generating PNG:', error);
    }
  };

  return (
    <div className="h-full flex flex-col">
      <h2 className="text-base sm:text-lg font-medium mb-2 sm:mb-4">{t('calculator.results')}</h2>
      
      <div 
        ref={resultsRef} 
        className="bg-white p-3 sm:p-4 rounded-lg flex-grow"
        style={{ minHeight: isMobile ? '300px' : '400px' }}
      >
        <InputSummary inputs={inputs} />
        <FeeBreakdown results={results} />
        {inputs.transactionType === 'sell' && <TaxCalculation results={results} inputs={inputs} />}
        <FinalResult results={results} inputs={inputs} />
      </div>
      
      {/* Always reserve space for the download buttons, but only show them for valid results */}
      <div className="mt-3 sm:mt-4 flex flex-wrap gap-2 justify-end min-h-[32px] sm:min-h-[38px]">
        {hasValidResults && (
          <>
            <Button 
              onClick={handleDownloadPDF}
              size={isMobile ? "sm" : "default"}
              className="flex items-center gap-1 text-xs sm:text-sm h-8 sm:h-10"
            >
              <Download size={isMobile ? 14 : 16} />
              {t('download.pdf')}
            </Button>
            
            <Button 
              onClick={handleDownloadPNG}
              size={isMobile ? "sm" : "default"}
              variant="outline"
              className="flex items-center gap-1 text-xs sm:text-sm h-8 sm:h-10"
            >
              <FileImage size={isMobile ? 14 : 16} />
              {t('download.png')}
            </Button>
          </>
        )}
      </div>
    </div>
  );
};

export default ResultsDisplay;
