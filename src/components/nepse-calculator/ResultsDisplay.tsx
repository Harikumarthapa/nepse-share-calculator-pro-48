import React, { useRef } from 'react';
import { FileImage, Download } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { CalculationInputs, CalculationResults } from './types';
import InputSummary from './results/InputSummary';
import FeeBreakdown from './results/FeeBreakdown';
import TaxCalculation from './results/TaxCalculation';
import FinalResult from './results/FinalResult';
import html2canvas from 'html2canvas';
import html2pdf from 'html2pdf.js';
import { useLanguage } from '@/contexts/LanguageContext';
import { useIsMobile } from '@/hooks/use-mobile';

interface ResultsDisplayProps {
  results: CalculationResults | null;
  inputs: CalculationInputs;
}

const ResultsDisplay: React.FC<ResultsDisplayProps> = ({ results, inputs }) => {
  const resultsRef = useRef<HTMLDivElement>(null);
  const { t, language } = useLanguage();
  const isMobile = useIsMobile();

  const hasValidResults = results &&
    (inputs.quantity &&
      ((inputs.transactionType === 'buy' && inputs.buyPrice) ||
        (inputs.transactionType === 'sell' && inputs.buyPrice && inputs.sellPrice)));

  const formattedDate = () => {
    const today = new Date();
    return today.toLocaleDateString(language === 'ne' ? 'ne-NP' : 'en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    });
  };

  const handleDownloadPDF = () => {
    if (!resultsRef.current) return;

    const element = resultsRef.current;
    const date = formattedDate();

    const clone = element.cloneNode(true) as HTMLElement;

    // Add header
    const header = document.createElement('div');
    header.style.textAlign = 'center';
    header.style.marginBottom = '12px';
    header.innerHTML = `
      <div style="font-size: 20px; font-weight: bold;">
        Reports by ShareCalculator.App
      </div>
    `;
    clone.insertBefore(header, clone.firstChild);

    // Add footer
    const footer = document.createElement('div');
    footer.style.textAlign = 'center';
    footer.style.fontSize = '16px';
    footer.style.color = '#888';
    footer.style.marginTop = '20px';
    footer.innerHTML = `
      Generated by sharecalculator.app on ${date}<br/>
      For more visit <a href="https://sharecalculator.app" target="_blank">ShareCalculator.App</a>
    `;
    clone.appendChild(footer);

    const opt = {
      margin: [10, 10],
      filename: 'nepse-calculation-result.pdf',
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2, useCORS: true },
      jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },
    };

    html2pdf().set(opt).from(clone).save();
  };

  const handleDownloadPNG = async () => {
    if (!resultsRef.current) return;

    try {
      const canvas = await html2canvas(resultsRef.current, {
        scale: 2,
        useCORS: true,
        logging: false,
        allowTaint: false,
      });

      const ctx = canvas.getContext('2d');
      const date = formattedDate();

      if (ctx) {
        const padding = 30;
        ctx.font = 'bold 24px Arial';
        ctx.fillStyle = '#000';
        ctx.textAlign = 'center';
        ctx.fillText('Reports by ShareCalculator.App', canvas.width / 2, padding);

        ctx.font = '20px Arial';
        ctx.fillStyle = '#555';
        ctx.fillText(
          `Generated by sharecalculator.app on ${date}`,
          canvas.width / 2,
          canvas.height - padding
        );
      }

      canvas.toBlob((blob) => {
        if (blob) {
          const link = document.createElement('a');
          link.href = URL.createObjectURL(blob);
          link.download = 'nepse-calculation-result.png';
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        }
      }, 'image/png');
    } catch (error) {
      console.error('Error generating PNG:', error);
    }
  };

  return (
    <div className="h-full flex flex-col">
      <h2 className="text-base sm:text-lg font-medium mb-2 sm:mb-4">{t('calculator.results')}</h2>

      <div
        ref={resultsRef}
        className="bg-white p-3 sm:p-4 rounded-lg flex-grow"
        style={{ minHeight: isMobile ? '300px' : '400px' }}
      >
        <InputSummary inputs={inputs} />
        <FeeBreakdown results={results} />
        {inputs.transactionType === 'sell' && <TaxCalculation results={results} inputs={inputs} />}
        <FinalResult results={results} inputs={inputs} />
      </div>

      <div className="mt-3 sm:mt-4 flex flex-wrap gap-2 justify-end min-h-[32px] sm:min-h-[38px]">
        {hasValidResults && (
          <>
            <Button
              onClick={handleDownloadPDF}
              size={isMobile ? 'sm' : 'default'}
              className="flex items-center gap-1 text-xs sm:text-sm h-8 sm:h-10"
            >
              <Download size={isMobile ? 14 : 16} />
              {t('download.pdf')}
            </Button>

            <Button
              onClick={handleDownloadPNG}
              size={isMobile ? 'sm' : 'default'}
              variant="outline"
              className="flex items-center gap-1 text-xs sm:text-sm h-8 sm:h-10"
            >
              <FileImage size={isMobile ? 14 : 16} />
              {t('download.png')}
            </Button>
          </>
        )}
      </div>
    </div>
  );
};

export default ResultsDisplay;
