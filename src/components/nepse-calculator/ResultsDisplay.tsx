import React, { useRef } from 'react';
import { FileImage, Download } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { CalculationInputs, CalculationResults } from './types';
import InputSummary from './results/InputSummary';
import FeeBreakdown from './results/FeeBreakdown';
import TaxCalculation from './results/TaxCalculation';
import FinalResult from './results/FinalResult';
import html2canvas from 'html2canvas';
import html2pdf from 'html2pdf.js';
import { useLanguage } from '@/contexts/LanguageContext';
import { useIsMobile } from '@/hooks/use-mobile';

interface ResultsDisplayProps {
  results: CalculationResults | null;
  inputs: CalculationInputs;
}

const ResultsDisplay: React.FC<ResultsDisplayProps> = ({ results, inputs }) => {
  const resultsRef = useRef<HTMLDivElement>(null);
  const { t, language } = useLanguage();
  const isMobile = useIsMobile();
  
  const hasValidResults = results && 
    (inputs.quantity && 
    ((inputs.transactionType === 'buy' && inputs.buyPrice) || 
     (inputs.transactionType === 'sell' && inputs.buyPrice && inputs.sellPrice)));

  const generateWatermark = () => {
    const today = new Date();
    const formattedDate = today.toLocaleDateString(language === 'ne' ? 'ne-NP' : 'en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    });
    return `Generated by sharecalculator.app on ${formattedDate}`;
  };

  const handleDownloadPDF = () => {
    if (!resultsRef.current) return;

    const element = resultsRef.current;
    const watermark = generateWatermark();

    const header = `
      <div style="text-align: center; margin-bottom: 10px;">
        <img src="https://sharecalculator.app/favicon.ico" width="16" height="16" style="vertical-align: middle; margin-right: 6px;" />
        <span style="font-size: 14px; font-weight: bold;">Reports by ShareCalculator.App</span>
      </div>
    `;

    const footer = `
      <div style="text-align: center; color: #888; font-size: 10px;">
        ${watermark}<br />
        For more visit <a href="https://sharecalculator.app/" style="color: #0000EE;">ShareCalculator.App</a>
      </div>
    `;

    const opt = {
      margin: [10, 10],
      filename: 'nepse-calculation-result.pdf',
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },
      pagebreak: { mode: ['avoid-all'] }
    };

    const wrapper = document.createElement('div');
    wrapper.innerHTML = `${header}${element.outerHTML}${footer}`;
    html2pdf().set(opt).from(wrapper).save();
  };

  const handleDownloadPNG = async () => {
    if (!resultsRef.current) return;

    const element = resultsRef.current;
    const watermark = generateWatermark();

    try {
      const canvas = await html2canvas(element, {
        scale: 2,
        logging: false,
        useCORS: true,
        allowTaint: true,
      });

      const ctx = canvas.getContext('2d');
      if (ctx) {
        // Header
        const favicon = new Image();
        favicon.crossOrigin = 'anonymous';
        favicon.src = 'https://sharecalculator.app/favicon.ico';
        favicon.onload = () => {
          ctx.drawImage(favicon, canvas.width / 2 - 70, 10, 16, 16);
          ctx.font = 'bold 16px Arial';
          ctx.fillStyle = '#000';
          ctx.textAlign = 'left';
          ctx.fillText('Reports by ShareCalculator.App', canvas.width / 2 - 48, 24);

          // Divider
          ctx.beginPath();
          ctx.moveTo(0, 40);
          ctx.lineTo(canvas.width, 40);
          ctx.strokeStyle = '#ccc';
          ctx.stroke();

          // Footer watermark
          ctx.font = '10px Arial';
          ctx.fillStyle = '#888';
          ctx.textAlign = 'center';
          ctx.fillText(watermark, canvas.width / 2, canvas.height - 20);
          ctx.fillText('For more visit ShareCalculator.App [https://sharecalculator.app/]', canvas.width / 2, canvas.height - 8);

          canvas.toBlob((blob) => {
            if (blob) {
              const url = URL.createObjectURL(blob);
              const link = document.createElement('a');
              link.href = url;
              link.download = 'nepse-calculation-result.png';
              document.body.appendChild(link);
              link.click();
              document.body.removeChild(link);
              URL.revokeObjectURL(url);
            }
          }, 'image/png');
        };
      }
    } catch (error) {
      console.error('Error generating PNG:', error);
    }
  };

  return (
    <div className="h-full flex flex-col">
      <h2 className="text-base sm:text-lg font-medium mb-2 sm:mb-4">{t('calculator.results')}</h2>
      
      <div 
        ref={resultsRef} 
        className="bg-white p-3 sm:p-4 rounded-lg flex-grow"
        style={{ minHeight: isMobile ? '300px' : '400px' }}
      >
        <InputSummary inputs={inputs} />
        <FeeBreakdown results={results} />
        {inputs.transactionType === 'sell' && <TaxCalculation results={results} inputs={inputs} />}
        <FinalResult results={results} inputs={inputs} />
      </div>

      <div className="mt-3 sm:mt-4 flex flex-wrap gap-2 justify-end min-h-[32px] sm:min-h-[38px]">
        {hasValidResults && (
          <>
            <Button 
              onClick={handleDownloadPDF}
              size={isMobile ? "sm" : "default"}
              className="flex items-center gap-1 text-xs sm:text-sm h-8 sm:h-10"
            >
              <Download size={isMobile ? 14 : 16} />
              {t('download.pdf')}
            </Button>
            <Button 
              onClick={handleDownloadPNG}
              size={isMobile ? "sm" : "default"}
              variant="outline"
              className="flex items-center gap-1 text-xs sm:text-sm h-8 sm:h-10"
            >
              <FileImage size={isMobile ? 14 : 16} />
              {t('download.png')}
            </Button>
          </>
        )}
      </div>
    </div>
  );
};

export default ResultsDisplay;
